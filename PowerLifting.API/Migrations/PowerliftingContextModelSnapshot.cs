// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PowerLifting.API;
using PowerLifting.Persistence;

namespace PowerLifting.API.Migrations
{
    [DbContext(typeof(PowerliftingContext))]
    partial class PowerliftingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("IdentityUserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.ToTable("IdentityUserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.ToTable("IdentityUserToken");
                });

            modelBuilder.Entity("PowerLifting.ProgramLogExercises.Model.ProgramLogExercise", b =>
                {
                    b.Property<int>("ProgramLogExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExerciseName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LiftingDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumOfSets")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgramLogId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProgramLogExerciseId");

                    b.HasIndex("ProgramLogId");

                    b.ToTable("ProgramLogExercise");
                });

            modelBuilder.Entity("PowerLifting.Service.Exercises.Model.ExerciseMuscleGroup", b =>
                {
                    b.Property<int>("ExerciseMuscleGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExerciseMuscleGroupName")
                        .HasColumnType("TEXT");

                    b.HasKey("ExerciseMuscleGroupId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("ExerciseMuscleGroup");
                });

            modelBuilder.Entity("PowerLifting.Service.Exercises.Model.ExerciseType", b =>
                {
                    b.Property<int>("ExerciseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExerciseTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ExerciseTypeId");

                    b.HasAlternateKey("ExerciseTypeName");

                    b.ToTable("ExerciseType");
                });

            modelBuilder.Entity("PowerLifting.Service.LiftingStatsAudit.Model.LiftingStatAudit", b =>
                {
                    b.Property<int>("LiftingStatAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bench")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateChange")
                        .HasColumnType("TEXT");

                    b.Property<string>("Deadlift")
                        .HasColumnType("TEXT");

                    b.Property<string>("Squat")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LiftingStatAuditId");

                    b.ToTable("LiftingStatAudit");
                });

            modelBuilder.Entity("PowerLifting.Service.Users.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email");

                    b.ToTable("IdentityUser");
                });

            modelBuilder.Entity("PowerLifting.Services.TemplateRepSchemes.Model.TemplateRepScheme", b =>
                {
                    b.Property<int>("TemplateRepSchemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumOfReps")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Percentage")
                        .HasColumnType("REAL");

                    b.Property<int>("SetNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TemplateExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WeightLifted")
                        .HasColumnType("REAL");

                    b.HasKey("TemplateRepSchemeId");

                    b.HasIndex("TemplateExerciseId");

                    b.ToTable("TemplateRepScheme");
                });

            modelBuilder.Entity("Powerlifting.Service.Exercises.Model.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ExerciseTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ExerciseId");

                    b.HasAlternateKey("ExerciseName");

                    b.HasIndex("ExerciseTypeId");

                    b.ToTable("Exercise");
                });

            modelBuilder.Entity("Powerlifting.Service.LiftingStats.Model.LiftingStat", b =>
                {
                    b.Property<int>("LiftingStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("BenchWeight")
                        .HasColumnType("REAL");

                    b.Property<double>("DeadliftWeight")
                        .HasColumnType("REAL");

                    b.Property<double?>("Percentage")
                        .HasColumnType("REAL");

                    b.Property<double>("SquatWeight")
                        .HasColumnType("REAL");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LiftingStatId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("LiftingStat");
                });

            modelBuilder.Entity("Powerlifting.Service.TemplateExercises.Model.TemplateExercise", b =>
                {
                    b.Property<int>("TemplateExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExerciseName")
                        .HasColumnType("TEXT");

                    b.Property<int>("NoOfSets")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Percentage")
                        .HasColumnType("REAL");

                    b.Property<int>("TemplateProgramId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("TemplateExerciseId");

                    b.HasIndex("TemplateProgramId");

                    b.ToTable("TemplateExercise");
                });

            modelBuilder.Entity("Powerlifting.Service.TemplatePrograms.Model.TemplateProgram", b =>
                {
                    b.Property<int>("TemplateProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Difficulty")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("NoOfWeeks")
                        .HasColumnType("INTEGER");

                    b.HasKey("TemplateProgramId");

                    b.ToTable("TemplateProgram");
                });

            modelBuilder.Entity("Powerlifting.Services.ProgramLogRepSchemes.Model.ProgramLogRepScheme", b =>
                {
                    b.Property<int>("ProgramLogRepSchemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumOfReps")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Percentage")
                        .HasColumnType("REAL");

                    b.Property<int?>("ProgramLogExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SetNo")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WeightLifted")
                        .HasColumnType("REAL");

                    b.HasKey("ProgramLogRepSchemeId");

                    b.HasIndex("ProgramLogExerciseId");

                    b.ToTable("ProgramLogRepScheme");
                });

            modelBuilder.Entity("Powerlifting.Services.ProgramLogs.ProgramLog", b =>
                {
                    b.Property<int>("ProgramLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Friday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Monday")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NoOfDaysLifting")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Saturday")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Sunday")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TemplateProgramId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Thursday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProgramLogId");

                    b.HasIndex("UserId");

                    b.ToTable("ProgramLog");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.HasOne("PowerLifting.Service.Users.Model.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PowerLifting.ProgramLogExercises.Model.ProgramLogExercise", b =>
                {
                    b.HasOne("Powerlifting.Services.ProgramLogs.ProgramLog", null)
                        .WithMany("ProgramLogExercises")
                        .HasForeignKey("ProgramLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PowerLifting.Service.Exercises.Model.ExerciseMuscleGroup", b =>
                {
                    b.HasOne("Powerlifting.Service.Exercises.Model.Exercise", null)
                        .WithMany("ExerciseMuscleGroups")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PowerLifting.Services.TemplateRepSchemes.Model.TemplateRepScheme", b =>
                {
                    b.HasOne("Powerlifting.Service.TemplateExercises.Model.TemplateExercise", null)
                        .WithMany("TemplateRepSchemes")
                        .HasForeignKey("TemplateExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Powerlifting.Service.Exercises.Model.Exercise", b =>
                {
                    b.HasOne("PowerLifting.Service.Exercises.Model.ExerciseType", "ExerciseType")
                        .WithMany()
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Powerlifting.Service.LiftingStats.Model.LiftingStat", b =>
                {
                    b.HasOne("PowerLifting.Service.Users.Model.User", null)
                        .WithOne("LiftingStats")
                        .HasForeignKey("Powerlifting.Service.LiftingStats.Model.LiftingStat", "UserId");
                });

            modelBuilder.Entity("Powerlifting.Service.TemplateExercises.Model.TemplateExercise", b =>
                {
                    b.HasOne("Powerlifting.Service.TemplatePrograms.Model.TemplateProgram", null)
                        .WithMany("TemplateExercises")
                        .HasForeignKey("TemplateProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Powerlifting.Services.ProgramLogRepSchemes.Model.ProgramLogRepScheme", b =>
                {
                    b.HasOne("PowerLifting.ProgramLogExercises.Model.ProgramLogExercise", null)
                        .WithMany("ProgramLogRepSchemes")
                        .HasForeignKey("ProgramLogExerciseId");
                });

            modelBuilder.Entity("Powerlifting.Services.ProgramLogs.ProgramLog", b =>
                {
                    b.HasOne("PowerLifting.Service.Users.Model.User", null)
                        .WithMany("ProgramLogs")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
