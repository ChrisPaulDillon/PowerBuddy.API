variables:
  BuildConfiguration: "release"
  nugetversion: $(GitVersion.MajorMinorPatch)
  awapplication: "**/AW.Application/*.csproj"
  benvtag: refs/tags/$(Build.SourceBranchName)
  benvhead: refs/heads/$(Build.SourceBranchName)
  image: $(acr.registry)/$(System.TeamProject)/aw-webapi
  consumer-image: $(acr.registry)/$(System.TeamProject)/aw-consumer

jobs:
  - job: "xunit_tests"
    pool:
      name: Default
      variables:
      buildConfiguration: "Release"
    steps:
      - task: UseDotNet@2
        displayName: "Use dotnet sdk 3.x"
        inputs:
          version: 3.x
      - task: UseDotNet@2
        displayName: "Use dotnet sdk 2.x"
        inputs:
          version: 2.x
      - script: echo "$(nuget.config)" > Nuget.config
      - script: dotnet restore --configfile Nuget.config
      - script: dotnet build --configuration $(buildConfiguration)
        displayName: "dotnet build $(buildConfiguration)"
      - task: DotNetCoreCLI@2
        inputs:
          command: test
          projects: "**/**.UnitTests/*.csproj"
          arguments: "--configuration $(buildConfiguration)"

  - job: "build_web_api"
    dependsOn:
      - "xunit_tests"
    pool:
      name: Default
    steps:
      - checkout: self
        persistCredentials: true
        clean: true

      - task: NuGetCommand@2
        displayName: GitVersion
        inputs:
          command: custom
          arguments: install GitVersion.CommandLine -Version 5.0.1 -OutputDirectory $(Build.BinariesDirectory)/tools -ExcludeVersion
      - script: mono $(Build.BinariesDirectory)/tools/GitVersion.CommandLine/tools/GitVersion.exe /output buildserver /nofetch
      - script: echo "##vso[build.updatebuildnumber]$(GitVersion.SemVer)"

      - script: |
          set -e
          docker login -u $(acr.user) -p $(acr.pass) $(acr.registry)
          echo "$(nuget.config)" > Nuget.config
          docker build -f ./AW.WebAPI/Dockerfile -t $(image):v$(GitVersion.SemVer) .
          docker push $(image):v$(GitVersion.SemVer)
          docker rmi $(image):v$(GitVersion.SemVer)

  - job: "build_consumer"
    dependsOn:
      - "xunit_tests"
    pool:
      name: Default
    steps:
      - checkout: self
        persistCredentials: true
        clean: true

      - task: NuGetCommand@2
        displayName: GitVersion
        inputs:
          command: custom
          arguments: install GitVersion.CommandLine -Version 5.0.1 -OutputDirectory $(Build.BinariesDirectory)/tools -ExcludeVersion
      - script: mono $(Build.BinariesDirectory)/tools/GitVersion.CommandLine/tools/GitVersion.exe /output buildserver /nofetch
      - script: echo "##vso[build.updatebuildnumber]$(GitVersion.SemVer)"

      - script: |
          set -e
          docker login -u $(acr.user) -p $(acr.pass) $(acr.registry)
          echo "$(nuget.config)" > Nuget.config
          docker build -f ./AW.Consumer/Dockerfile -t $(consumer-image):v$(GitVersion.SemVer) .
          docker push $(consumer-image):v$(GitVersion.SemVer)
          docker rmi $(consumer-image):v$(GitVersion.SemVer)

  - job: "build_artifacts"
    dependsOn:
      - "xunit_tests"
      - "build_web_api"
      - "build_consumer"
    pool:
      name: Default
    steps:
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: "$(Build.Repository.LocalPath)/deploy"
          artifactName: helm-chart

  - job: "build_libs_push_nuget"
    dependsOn:
      - "xunit_tests"
    pool:
      name: Default
    steps:
      - checkout: self
        persistCredentials: true
        clean: true

      - task: UseDotNet@2
        displayName: "Use dotnet sdk 3.x"
        inputs:
          version: 3.x
      - task: UseDotNet@2
        displayName: "Use dotnet sdk 2.x"
        inputs:
          version: 2.x

      - task: NuGetCommand@2
        displayName: GitVersion
        inputs:
          command: custom
          arguments: install GitVersion.CommandLine -Version 5.0.1 -OutputDirectory $(Build.BinariesDirectory)/tools -ExcludeVersion
      - script: mono $(Build.BinariesDirectory)/tools/GitVersion.CommandLine/tools/GitVersion.exe /output buildserver /nofetch
      - script: echo "##vso[build.updatebuildnumber]$(GitVersion.SemVer)"

      - script: |
          echo "$(nuget.config)" > Nuget.config
          dotnet restore --configfile Nuget.config
        displayName: "dotnet restore $(buildConfiguration)"

      - task: DotNetCoreCLI@2
        inputs:
          command: "build"
          projects: "**/AW.Application/*.csproj"
          arguments: "--configuration $(BuildConfiguration)"

      - task: DotNetCoreCLI@2
        displayName: "dotnet pack AW.Application"
        inputs:
          command: pack
          packagesToPack: "**/AW.Application/*.csproj"
          nobuild: true
          versioningScheme: byEnvVar
          versionEnvVar: GitVersion.NuGetVersionV2

      - task: DotNetCoreCLI@2
        inputs:
          command: "build"
          projects: "**/AW.Common/*.csproj"
          arguments: "--configuration $(BuildConfiguration)"

      - task: DotNetCoreCLI@2
        displayName: "dotnet pack AW.Common"
        inputs:
          command: pack
          packagesToPack: "**/AW.Common/*.csproj"
          nobuild: true
          versioningScheme: byEnvVar
          versionEnvVar: GitVersion.NuGetVersionV2

      - task: DotNetCoreCLI@2
        inputs:
          command: "build"
          projects: "**/AW.Infrastructure/*.csproj"
          arguments: "--configuration $(BuildConfiguration)"

      - task: DotNetCoreCLI@2
        displayName: "dotnet pack AW Infrastructure"
        inputs:
          command: pack
          packagesToPack: "**/AW.Infrastructure/*.csproj"
          nobuild: true
          versioningScheme: byEnvVar
          versionEnvVar: GitVersion.NuGetVersionV2

      - task: DotNetCoreCLI@2
        inputs:
          command: "build"
          projects: "**/AW.Persistence/*.csproj"
          arguments: "--configuration $(BuildConfiguration)"

      - task: DotNetCoreCLI@2
        displayName: "dotnet pack AW.Persistence"
        inputs:
          command: pack
          packagesToPack: "**/AW.Persistence/*.csproj"
          nobuild: true
          versioningScheme: byEnvVar
          versionEnvVar: GitVersion.NuGetVersionV2

      - task: DotNetCoreCLI@2
        inputs:
          command: "build"
          projects: "**/AW.Jobs/*.csproj"
          arguments: "--configuration $(BuildConfiguration)"

      - task: DotNetCoreCLI@2
        displayName: "dotnet pack AW.Jobs"
        inputs:
          command: pack
          packagesToPack: "**/AW.Jobs/*.csproj"
          nobuild: true
          versioningScheme: byEnvVar
          versionEnvVar: GitVersion.NuGetVersionV2

      - task: DotNetCoreCLI@2
        inputs:
          command: "build"
          projects: "**/AW.GrpcClient/*.csproj"
          arguments: "--configuration $(BuildConfiguration)"

      - task: DotNetCoreCLI@2
        displayName: "dotnet pack AW.GrpcClient"
        inputs:
          command: pack
          packagesToPack: "**/AW.GrpcClient/*.csproj"
          nobuild: true
          versioningScheme: byEnvVar
          versionEnvVar: GitVersion.NuGetVersionV2

      - task: NuGetCommand@2
        inputs:
          command: "push"
          packagesToPush: "$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg"
          nuGetFeedType: "internal"
          publishVstsFeed: "/bbb29db8-0f5c-486e-a325-09eaf10c7c18"
          versioningScheme: byBuildNumber
          allowPackageConflicts: true
      # - task: Bash@3
      #   inputs:
      #     targetType: 'inline'
      #     script: 'git config user.email "AzureDevOps@Microsoft.com" &&
      #                     git config user.name "AzureDevOps" &&
      #                     git tag -a v$(GitVersion.SemVer) -m "$(GitVersion.InformationalVersion)" &&
      #                     git push origin --tags'
      #     failOnStderr: false
